import { db } from '../firebase';
import { getErrorMessage } from './FunctionsServices';
import { Notyf } from 'notyf';

// RÃ©cupÃ¨re toutes les Ã©vÃ¨nements stockÃ©s dans FireStore
export const fetchEvents = async function () {
  return db
    .collection('events')
    .get()
    .then(res => res);
};

// Supprime un Ã©vÃ¨nement dans Firestore puis affiche un message de succÃ¨s oÃ¹ d'erreur
export const deleteEvent = function (event) {
  const notyf = new Notyf();

  return db
    .collection('events')
    .doc(event.eventId.trim())
    .delete()
    .then(notyf.success(`L'Ã©vÃ¨nement ${event.name} Ã  bien Ã©tÃ© supprimÃ© ! âœ…`))
    .catch(error => {
      notyf.error(`${getErrorMessage(error.code)} ğŸ’¥`);
    });
};

// Met Ã  jour un Ã©vÃ¨nement dans Firestore puis affiche un message de succÃ¨s oÃ¹ d'erreur
export const updateEvent = function (event) {
  const notyf = new Notyf();

  // Shallow Copy de l'Ã©vÃ¨nement pour pouvoir supprimer les informations que nous avions ajoutÃ© dans le champs category le temps de travailler avec l'Ã©vÃ¨nement.
  // Cela nous permet donc de garder uniquement la rÃ©fÃ©rence Ã  la category.
  const updateEvent = { ...event };
  delete updateEvent.category;

  return db
    .collection('events')
    .doc(event.eventId.trim())
    .update(updateEvent)
    .then(notyf.success(`L'Ã©vÃ¨nement ${event.name} a bien Ã©tÃ© mis Ã  jour ! âœ…`))
    .catch(error => notyf.error(`${getErrorMessage(error.code)}ğŸ’¥`));
};
